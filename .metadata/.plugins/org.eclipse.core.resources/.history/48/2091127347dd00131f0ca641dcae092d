import java.text.DecimalFormat;
import java.util.Arrays;
import java.util.HashMap;
import java.util.LinkedHashMap;

/**
 * 
 * @author jied
 * 
 * Recommended Daily Intakes (Male & Female):
 * VitaminA - 900mcg 700mcg (1000 Microgram = 1 Milligram)
 * VitaminC - 90mg 75mg (1000 Milligram = 1 gram)
 * Calcium - 1000mg 1000mg
 * Iron - 8mg 18mg
 */

public class CleanLine {
	
	private String[] rawLine, cleanLine;
	private final static String FIELD_DELIMITER = "[/^]";
	private final static LinkedHashMap<String, Integer> INDEX_MAP;
	private final static HashMap<String, Integer> REC_MINERAL_INTAKE_MAP;
	private DecimalFormat df; 
	
	static {
		// map nutrition category to its position in the array 
		INDEX_MAP = new LinkedHashMap<String, Integer>();
		INDEX_MAP.put("Name", 1);
		INDEX_MAP.put("Weight1", 48);
		INDEX_MAP.put("Size1", 49);
		INDEX_MAP.put("Weight2", 50);
		INDEX_MAP.put("Size2", 51);
		INDEX_MAP.put("Calories", 3);
		INDEX_MAP.put("Total fat", 5);
		INDEX_MAP.put("Saturated fat", 44);
		INDEX_MAP.put("Polyunsaturated fat", 46);
		INDEX_MAP.put("Monounsaturated fat", 45);
		//INDEX_MAP.put("Trans fat", ??); not available from UADA Database
		INDEX_MAP.put("Cholesterol", 47);
		INDEX_MAP.put("Sodium", 15);
		INDEX_MAP.put("Potassium", 14);
		INDEX_MAP.put("Total Carbs", 7);
		INDEX_MAP.put("Dietary fiber", 8);
		INDEX_MAP.put("Sugars", 9);
		INDEX_MAP.put("Protein", 4);
		INDEX_MAP.put("Vit_A", 33); // in microgram - Âµg
		INDEX_MAP.put("Vit_C", 20); // in milligram - mg
		INDEX_MAP.put("Calcium", 10);
		INDEX_MAP.put("Iron", 11);
				
		// map mineral category to its recommended daily intakes value
		REC_MINERAL_INTAKE_MAP = new HashMap<String, Integer> ();
		REC_MINERAL_INTAKE_MAP.put("Vit_A", 700);
		REC_MINERAL_INTAKE_MAP.put("Vit_C", 75);
		REC_MINERAL_INTAKE_MAP.put("Calcium", 1000);
		REC_MINERAL_INTAKE_MAP.put("Iron", 18);
    }
	
	public CleanLine() {
		cleanLine = new String[21];
		df = new DecimalFormat("#.#");
	}
	
	public String[] split(String in) {
		return in.split(FIELD_DELIMITER);
	}
	
	public void extract(String[] in) {
		int index = 0;
		String data = "";
		for(Integer position: INDEX_MAP.values()) {
			data = round(in[position]); // round to only one digit after decimal
			// if data is empty, put default value 0
			if (data.equals("")) data = "0.0";
			// if data for minerals, need to convert to percentage data
			data = convertMineralToPercentage(position, data);
			cleanLine[index++] = data;
		}
	}
	
	private String convertMineralToPercentage(int position, String data) {
		final String[] minerals = {"Vit_A", "Vit_C", "Calcium", "Iron"};
		for (String mineral: minerals) {
			if (position == INDEX_MAP.get(mineral)) {
				double value = Double.valueOf(data) * 100.0 / REC_MINERAL_INTAKE_MAP.get(mineral);  
				value = Double.valueOf(df.format(value));
				data = String.valueOf((value));
				return data;
			}
		}		
		return data;
	}
	
	// round the data to only one digit after decimal
	private String round(String data) {
		if (isNumeric(data)) {
			double value = Double.valueOf(data);
			value = Double.valueOf(df.format(value));
			return String.valueOf((value));
		}
		return data;
	}
	
	private static boolean isNumeric(String str)
	{
	  return str.matches("\\d+(\\.\\d+)?");  //match a number with optional '-' and decimal.
	}
	
	public String clean(String in) {
		String[] raw = split(in);
		extract(raw);
		String result = "";
		for (String item : cleanLine) {
			result += item + "^";
		}
		return result;
	}
	
	private static void log(Object aMsg) {
	    System.out.println(String.valueOf(aMsg));
    }

	public static void main(String[] args) {
		String sample1 = "~16200~^~CAMPBELL'S BRN SUGAR&BACON FLAV BKD BNS~^69.40^123^3.85^1.92^1.75^23.08^6.2^10.00^31^1.11^^^^362^^^^^0.0^^^^^^^^^^^^0^^^^^^^^^^^^0.385^^^4^130^~.5 cup~^130^~1 serving~^0";
		String sample2 = "~18036~^~BREAD,MULTI-GRAIN,TSTD (INCLUDES WHOLE-GRAIN)~^31.46^288^14.52^4.60^2.32^47.11^8.1^6.94^111^2.72^85^247^250^414^1.85^0.307^2.201^35.8^0.1^0.243^0.142^4.394^0.365^0.286^70^0^70^70^28.8^0.00^0^0^0^0^0^0^0^97^0.40^0.0^0^1.5^0.948^0.826^2.035^0^28.35^~1 oz~^24^~1 slice,  regular~^0";
		CleanLine test = new CleanLine();
		System.out.println(Arrays.toString(test.split(sample2)));
		System.out.println(test.clean(sample12));
		System.out.println(Arrays.toString(test.cleanLine));
	}

}
